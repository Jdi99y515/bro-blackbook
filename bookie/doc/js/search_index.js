var search_data = {"index":{"searchIndex":["argparser","configparser","debugger","logfinder","logreader","reporter","throttler","color_on()","create_db()","debug()","debugging_on()","err()","find_recent_logs()","get_config()","get_wustl_info()","parse()","parse_alert_json()","parse_args()","read_db()","report()","send_email()","setup()","setup()","should_throttle?()","usersearch()","verify_logs()","warn()","write_db()","template"],"longSearchIndex":["argparser","configparser","debugger","logfinder","logreader","reporter","throttler","debugger#color_on()","throttler::create_db()","debugger#debug()","debugger#debugging_on()","debugger#err()","logfinder::find_recent_logs()","configparser::get_config()","reporter::get_wustl_info()","logreader::parse()","reporter::parse_alert_json()","argparser::parse_args()","throttler::read_db()","reporter::report()","reporter::send_email()","reporter::setup()","throttler::setup()","throttler::should_throttle?()","reporter::usersearch()","logfinder::verify_logs()","debugger#warn()","throttler::write_db()",""],"info":[["ArgParser","","ArgParser.html","","<p>ArgParser class to handle parsing options and arguments given via the\ncommand-line interface\n"],["ConfigParser","","ConfigParser.html","","<p>ConfigParser class to read in and parse the &#39;config.yml&#39; file that\nshould be included with the …\n"],["Debugger","","Debugger.html","","<p>A simple debugging/logging class that allows logging with progname tags and\nin various colors\n"],["LogFinder","","LogFinder.html","",""],["LogReader","","LogReader.html","","<p>Log-reading class that handles reading from a Bro log file and turning each\nline into a field-&gt;value …\n"],["Reporter","","Reporter.html","","<p>Reporter class that organizes the parsed data from Bro logs into an email\nform and sends it. Checks with …\n"],["Throttler","","Throttler.html","","<p>Throttler class to limit the amount of duplicate/similar emails that are\nbeing sent out. The Reporter …\n"],["color_on","Debugger","Debugger.html#method-i-color_on","()","<p>Function to turn on colorized logging for all objects\n"],["create_db","Throttler","Throttler.html#method-c-create_db","( fp )","<p>If the database does not exist, thie function is privately called to try to\ncreate it\n<p>Params\n<p>fp (String) … &mdash; "],["debug","Debugger","Debugger.html#method-i-debug","( msg )","<p>Print a message with a [DEBUG] tag if debugging is enabled\n<p>Params:\n<p>msg (String) &mdash; the message to be displayed …\n"],["debugging_on","Debugger","Debugger.html#method-i-debugging_on","()","<p>Function to turn on debugging for all objects\n"],["err","Debugger","Debugger.html#method-i-err","( msg )","<p>Print a message with an [ERROR] tag and exit the program\n<p>Params:\n<p>msg (String) &mdash; the message to be displayed …\n"],["find_recent_logs","LogFinder","LogFinder.html#method-c-find_recent_logs","( bro_log_dir )",""],["get_config","ConfigParser","ConfigParser.html#method-c-get_config","( base_dir )","<p>Spiders the <code>base_dir</code> looking for a &#39;config.yml&#39; file\nand parses it if found\n<p>Params:\n<p>base_dir (String) … &mdash; "],["get_wustl_info","Reporter","Reporter.html#method-c-get_wustl_info","( data )","<p>Parses the data from the Bro log line and returns the IPs/ports organized\nby whether or not they correspond …\n"],["parse","LogReader","LogReader.html#method-c-parse","( logfile )","<p>Parse the given file and return an <code>Array</code> of line data\n<p>Params:\n<p>logfile (String) &mdash; The filepath of the log …\n"],["parse_alert_json","Reporter","Reporter.html#method-c-parse_alert_json","( alert_json )","<p>Parses the alert_json field to get the alert subject and alert source\n<p>Params:\n<p>alert_json (String) &mdash; a <code>String</code> …\n"],["parse_args","ArgParser","ArgParser.html#method-c-parse_args","()","<p>Parses ARGV to determine various runtime configuration options\n<p>Returns:\n<p>An OpenStruct object containing …\n"],["read_db","Throttler","Throttler.html#method-c-read_db","( throttle_db_fp )","<p>Connect to the database at the specified filepath and try to read its\ncontents into a throttle-table …\n"],["report","Reporter","Reporter.html#method-c-report","( data )","<p>Takes in a <code>Hash</code> containing the line data and cals #send_email\nif it passes the Throttler check\n<p>Params: …\n"],["send_email","Reporter","Reporter.html#method-c-send_email","( data )","<p>Prints the given data to a temporary file and sends it via MAILX\n<p>Params:\n<p>data (+Hash of String-&gt;String+) … &mdash; "],["setup","Reporter","Reporter.html#method-c-setup","( mailing_list )","<p>Assign the given mailing list to the reporter class to use as TO addresses\n<p>Params:\n<p>mailing_list (+Array … &mdash; "],["setup","Throttler","Throttler.html#method-c-setup","( throttle_db_fp )","<p>Connects the Throttler class to the database and reads in the\nthrottle-table\n<p>Params:\n<p>throttle_db_fp (String) … &mdash; "],["should_throttle?","Throttler","Throttler.html#method-c-should_throttle-3F","( wustl_ip, tag )","<p>Function to determine whether or not an item should be throttled. If so,\nthen it returns true and performs …\n"],["usersearch","Reporter","Reporter.html#method-c-usersearch","( ts, wustl_ip, wustl_port )","<p>Takes in WUSTL info and calls an external script to perform a user lookup\n<p>Params:\n<p>ts (String) &mdash; a UNIX-timestamp …\n"],["verify_logs","LogFinder","LogFinder.html#method-c-verify_logs","( logs )",""],["warn","Debugger","Debugger.html#method-i-warn","( msg )","<p>Print a message with a [WARN] tag if debugging is enabled\n<p>Params:\n<p>msg (String) &mdash; the message to be displayed …\n"],["write_db","Throttler","Throttler.html#method-c-write_db","( wustl_ip, tag )","<p>Writes a new throttling item to the database\n<p>Params:\n<p>wustl_ip (String) &mdash; the IP (as a string) of the WUSTL …\n"],["template","","lib/template.html","","<p>#——————————————————————————– # #       Author: # …\n"]]}}